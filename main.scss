//**************************
//  TEME MIXIN
//**************************

// Light
$bg-list-light: #fafafa;
$bg-light: #e4e5f1;

$tc-primary-light: #9394a5;
$tc-select-light: #484b6a;
$tc-secondary-light: #d2d3db;
$tc-comp-light: #dddde4;

$border-light: #e3e4f1;

// Dark
$bg-dark: #161722;
$bg-list-dark: #25273c;

$tc-primary-dark: #cacde8;
$tc-select-dark: #e4e5f1;
$tc-secondary-dark: #777a92;
$tc-comp-dark: #5a5c72;

$border-dark: #393a4b;

$themes: (
  dark: (
    bg-img-desk: url("../assets/bg-desktop-dark.jpg"),
    bg-img-mob: url("../assets/bg-mobile-dark.jpg"),
    bg: $bg-dark,
    bg-list: $bg-list-dark,
    tc-primary: $tc-primary-dark,
    tc-secondary: $tc-secondary-dark,
    tc-select: $tc-select-dark,
    tc-comp: $tc-comp-dark,
    brdr: 1px solid $border-dark,
  ),
  light: (
    bg-img-desk: url("../assets/bg-desktop-light.jpg"),
    bg-img-mob: url("../assets/bg-mobile-light.jpg"),
    bg: $bg-light,
    bg-list: $bg-list-light,
    tc-primary: $tc-primary-light,
    tc-secondary: $tc-secondary-light,
    tc-select: $tc-select-light,
    tc-comp: $tc-comp-light,
    brdr: 1px solid $border-light,
  ),
);

/**
 * theme-aware - Change color of a css property based on the currently active theme
 *
 * @param  {key}     CSS property
 * @param  {color}   Color name defined in the themes under _color-palette.scss
 *
 * @example - @include theme-aware('background', 'color-background');
 * @returns - background: #FFF;
 */

@mixin theme-aware($key, $color) {
  @each $theme-name, $theme-color in $themes {
    .theme-#{$theme-name} & {
      #{$key}: map-get(map-get($themes, $theme-name), $color);
    }
  }
}

// ================================================================================

//**************************
//  MEDIA QUERIES MIXIN
//**************************

// 540px, 1024px, 1440px
$breakpoints-up: (
  "medium": "33.75em",
  "large": "64em",
  "xlarge": "90em",
);

// 539px, 1023px, 1399px
$breakpoints-down: (
  "small": "33.6875em",
  "medium": "63.9375em",
  "large": "89.9375em",
);

/**
 * breakpoint-up/down - Change color of a css property based on the currently active theme
 *
 * @param  {size}     min/max size of the screen
 *
 * @example:-
 *
 * HIDE FOR DESKTOP:
 @include breakpoint-down(small) {
    background: red;
 }
 * HIDE FOR MOBILE:
 @include breakpoint-up(medium) {
    background: blue;
 }
 *
 * if you are designing your layout with a mobile-first approach, then use min-width breakpoints and work your way up.
 * if you are designing for larger devices first, then set your default CSS as you normally would and adjust for smaller devices with the max-width approach.
*/

@mixin breakpoint-up($size) {
  @media (min-width: map-get($breakpoints-up,$size)) {
    @content;
  }
}

@mixin breakpoint-down($size) {
  @media (max-width: map-get($breakpoints-down,$size)) {
    @content;
  }
}
